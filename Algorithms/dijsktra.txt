#include <iostream>
#include<cmath>
#define V 4
#define INT_MAX 100
using namespace std;

//A utility function to find the vertex with minimum distance value, from
//the set of vertices not yet included in shortest path tree.
int minDistance(int dist[],bool sptSet[]){
    //Initialize min value.
    int min=INT_MAX,min_index;
    
    for(int v = 0;v<V;v++){
        if(sptSet[v]==false && dist[v] <= min){
            min = dist[v];min_index = v;
        }
    }
  return min_index;
}

//A utility function to print the constructed distance array.
void printSolution(int dist[],int n){
    cout<<"Vertex distance from Scource N"<<"\n";
    for(int i=0;i<V;i++){
        cout<<i<<"\t"<<dist[i]<<"\n";
    }
}

//Function that implements dijkstra's single source shortest path.
//for a graph represented using adjacency matrix representation.
void dijkstra(int graph[V][V],int src){
    int dist[V];  //The output array. dist[i] will hold the shortest
                  //distance from src to i.
    bool sptSet[V]; //sptSet[i] will true if vertex i is included in shortest 
                    //path tree or shortest distance from src to i is finalised.
    //Initialize all distance as INFINITE and stpSet[] as false.
    for(int i=0;i<V;i++){
        dist[i] = INT_MAX,sptSet[i] = false; 
    }
    //distance of source vertex from itself will always be 0. 
    dist[src] = 0;
    //Find shortest path for all vertices.
    for(int count=0;count<V-1;count++){
        //Pick up the minimum distance vertex from the set of the vertices not 
        //yet processed.u is always equal to src in first iteration.
        int u = minDistance(dist,sptSet);
        //Mark the picked vertex as processed.
        sptSet[u] = true;
        //Update the dist value of the adjacent vertices of the picked vertices.
        for(int v=0;v<V;v++){
            //Upadate dist[v] only if it is not in the stpSet,there is an edge from
            //u to v,and total weight of path from src to v through u is smaller than 
            //current value of dist[v].
            if(!sptSet[v] && graph[u][v] && dist[u]!= INT_MAX && dist[u] + graph[u][v] < dist[v]){
                dist[v] = dist[u] + graph[u][v];
            }
        }
        
    }
    //Print the constructed distance array
    printSolution(dist,V);
}

int main() {
    int graph[V][V] = {{0,10,20,0},
                       {10,0,5,16},
                       {20,5,0,20},
                       {0,16,20,0},
                     };
    dijkstra(graph,0);
}   