#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;

class Graph{
    int V;
    list<int> *adj; //Pointer to an array containing adjancency list.
    public:
    Graph(int V);
    void addEdge(int v,int w); //Fuction to add a edge to a graph.
    void BFS(int s);  //prints bfs travelsal from a given source s.
};

Graph::Graph(int V){
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v,int w){
    adj[v].push_back(w); //add w to v's list.    
}

void Graph::BFS(int s){
    bool *visited = new bool[V];
    //mark all the vertices are not visited.
    for(int i=0;i<V;i++){
        visited[i] = false;
    }
    //create a queue for bfs
    list<int> queue;
    //Mark the current node as visited and enqueue it.
    visited[s] = true;
    queue.push_back(s);
    //i will be used to get all the adjacent vertices of the vertex.
    list<int>::iterator i;
    while(!queue.empty()){
        //dequeue a vertex from the queue and print it.
        s = queue.front();
        cout<<s;
        queue.pop_front();
        //Get all the adjacent vertices of dequeued vertex s.
        //if the adjacent vertex has not been visited mark it visited.
        //and enque it.
        for(i = adj[s].begin();i!=adj[s].end();i++){
            if(!visited[*i]){
                visited[*i] = true;
                queue.push_back(*i);
            }
        }
    }
    
}

int main(){
    Graph a(4);
    a.addEdge(0,1);
    a.addEdge(0,2);
    a.addEdge(1,2);
    a.addEdge(2,0);
    a.addEdge(2,3);
    a.addEdge(3,3);
    a.BFS(2);
}
