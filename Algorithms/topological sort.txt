//A c++ program to print the topological sorting of a DAG.
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;

//Class to represent a graph.
class Graph{
    int v;   //No. of vertices. 
    list<int> *adj;    //Pointer an array containing adjancency list.
    void topologicalSortUtil(int v,bool visited[],stack<int> &Stack); //A function used by TopologicalSort.
    public:
    Graph(int v);           //Constructor.
    void addEdge(int v,int w);   //Function to add an edge to graph.
    void topologicalSort();  //Prints topological sort of complete graph.
};

Graph::Graph(int v){
    this->v = v;
    adj = new list<int>[v];
}

void Graph::addEdge(int v,int w){
        adj[v].push_back(w);  //Add w to v's list.
}

//A recursive function used by TopologicalSort.
void Graph::topologicalSortUtil(int v,bool visited[],stack<int> &Stack){
    visited[v] = true;  //Mark the current node as visited.
    //Recur all the vertices adjacent to this vertex.
    list<int>::iterator i;
    for(i=adj[v].begin();i!=adj[v].end();i++){
            if(!visited[*i]){
                topologicalSortUtil(*i,visited,Stack);
            }   
    }
    //Push the current vertex to the stack which stores result.
    Stack.push(v);
}

//The function to do topological sort.It uses recursive
//topologicalSortUtil().
void Graph::topologicalSort(){
    stack<int> Stack;
    bool *visited = new bool[v];
    //Mark all the vertices as not visited.
    for(int i=0;i<v;i++){
        visited[i] = false;
    }
    //Call the recursive helper function to store the topological sort
    //Starting from all the vertices one by one
    for(int i=0;i<v;i++){
        if(visited[i]==false){
            topologicalSortUtil(i,visited,Stack);
        }
    }
    //Print the contents of stack.
    while(Stack.empty()==false){
        cout<<Stack.top()<<" ";
        Stack.pop();
    }
}

//Driver function to test above funtion
int main(){
    //Create a graph 
    Graph g(6);
    g.addEdge(5,2);
    g.addEdge(5,0);
    g.addEdge(4,0);
    g.addEdge(4,1);
    g.addEdge(2,3);
    g.addEdge(3,1);
    g.topologicalSort();
}


